/* These conversions are only relevant to uDACS AD7770 */

/*
uDACS_T30K75KU POPST; Invalidate POPST;
{ POPST = (uDACS_A_Raw0 & 0xFFFFFF) |
    ((uDACS_A_Raw0 & 0x800000) ? 0xFF000000 : 0);
  Validate POPST;
}
AD7770_AI_stat_t uDACS_A_stat0; Invalidate uDACS_A_stat0;
{ uDACS_A_stat0 = (uDACS_A_Raw0 >> 24) & 0xFF;
  Validate uDACS_A_stat0;
}
uDACS_T30K75KU Pmp1T; Invalidate Pmp1T;
{ Pmp1T = (uDACS_A_Raw1 & 0xFFFFFF) |
    ((uDACS_A_Raw1 & 0x800000) ? 0xFF000000 : 0);
  Validate Pmp1T;
}
AD7770_AI_stat_t uDACS_A_stat1; Invalidate uDACS_A_stat1;
{ uDACS_A_stat1 = (uDACS_A_Raw1 >> 24) & 0xFF;
  Validate uDACS_A_stat1;
}
uDACS_T30K75KU Pmp2T; Invalidate Pmp2T;
{ Pmp2T = (uDACS_A_Raw2 & 0xFFFFFF) |
    ((uDACS_A_Raw2 & 0x800000) ? 0xFF000000 : 0);
  Validate Pmp2T;
}
AD7770_AI_stat_t uDACS_A_stat2; Invalidate uDACS_A_stat2;
{ uDACS_A_stat2 = (uDACS_A_Raw2 >> 24) & 0xFF;
  Validate uDACS_A_stat2;
}
uDACS_T30K75KU RPi_T; Invalidate RPi_T;
{ RPi_T = (uDACS_A_Raw3 & 0xFFFFFF) |
    ((uDACS_A_Raw3 & 0x800000) ? 0xFF000000 : 0);
  Validate RPi_T;
}
AD7770_AI_stat_t uDACS_A_stat3; Invalidate uDACS_A_stat3;
{ uDACS_A_stat3 = (uDACS_A_Raw3 >> 24) & 0xFF;
  Validate uDACS_A_stat3;
}
uDACS_T30K75KU Amb_T; Invalidate Amb_T;
{ Amb_T = (uDACS_A_Raw4 & 0xFFFFFF) |
    ((uDACS_A_Raw4 & 0x800000) ? 0xFF000000 : 0);
  Validate Amb_T;
}
AD7770_AI_stat_t uDACS_A_stat4; Invalidate uDACS_A_stat4;
{ uDACS_A_stat4 = (uDACS_A_Raw4 >> 24) & 0xFF;
  Validate uDACS_A_stat4;
}
uDACS_T30K75KU Rov1T; Invalidate Rov1T;
{ Rov1T = (uDACS_A_Raw5 & 0xFFFFFF) |
    ((uDACS_A_Raw5 & 0x800000) ? 0xFF000000 : 0);
  Validate Rov1T;
}
AD7770_AI_stat_t uDACS_A_stat5; Invalidate uDACS_A_stat5;
{ uDACS_A_stat5 = (uDACS_A_Raw5 >> 24) & 0xFF;
  Validate uDACS_A_stat5;
}
uDACS_T30K75KU Rov2T; Invalidate Rov2T;
{ Rov2T = (uDACS_A_Raw6 & 0xFFFFFF) |
    ((uDACS_A_Raw6 & 0x800000) ? 0xFF000000 : 0);
  Validate Rov2T;
}
AD7770_AI_stat_t uDACS_A_stat6; Invalidate uDACS_A_stat6;
{ uDACS_A_stat6 = (uDACS_A_Raw6 >> 24) & 0xFF;
  Validate uDACS_A_stat6;
}
uDACS_T30K75KU Rov3T; Invalidate Rov3T;
{ Rov3T = (uDACS_A_Raw7 & 0xFFFFFF) |
    ((uDACS_A_Raw7 & 0x800000) ? 0xFF000000 : 0);
  Validate Rov3T;
}
AD7770_AI_stat_t uDACS_A_stat7; Invalidate uDACS_A_stat7;
{ uDACS_A_stat7 = (uDACS_A_Raw7 >> 24) & 0xFF;
  Validate uDACS_A_stat7;
}
*/
uDACS_on_off POPSPwr; Invalidate POPSPwr;
{ POPSPwr = (PwrStat>>3) & 1; Validate POPSPwr; }

/*
uDACS_sec uDACS_A_elapsed_d; Invalidate uDACS_A_elapsed_d;
{ uDACS_A_elapsed_d = uDACS_A_elapsed/100;
  Validate uDACS_A_elapsed_d;
}
*/

%{
  #define FailText_txt(x) ((x&1)?" On":"Off")
  #define ModeText_txt(x) ((x&1)?"Flt":"Lab")
  const char *MMcmd_text(uint8_t x) {
    switch (x) {
      case 0:  return "-----";
      case 1:  return "Open2";
      case 2:  return "Open ";
      case 3:  return "Close";
      default: return "*****";
    }
  }
  const char *MMstat_text(uint8_t x) {
    switch (x) {
      case 0:  return "------";
      case 1:  return "Opened";
      case 2:  return "Opend2";
      case 3:  return "Closed";
      default: return "******";
    }
  }
%}
TM typedef uint8_t FailText_t { text "%3u" FailText_txt(); }
FailText_t FailText; Invalidate FailText;
{ FailText = FailMode&1; Validate FailText; }

TM typedef uint8_t ModeText_t { text "%3u" ModeText_txt(); }
ModeText_t ModeText; Invalidate ModeText;
{ ModeText = (FailMode>>4)&1; Validate ModeText; }

TM typedef uint8_t MMcmd_t { text "%5u" MMcmd_text(); }
MMcmd_t MMcmd; Invalidate MMcmd;
{ MMcmd = (PwrStat>>4)&3; Validate MMcmd; }

TM typedef uint8_t MMstat_t { text "%6u" MMstat_text(); }
MMstat_t MMstat; Invalidate MMstat;
{ MMstat = (PwrStat>>6)&3; Validate MMstat; }

uDACS_on_off PumpCmd; Invalidate PumpCmd;
{ PumpCmd = (PwrStat>>3) & 1; Validate PumpCmd; }
